.deployBranch: &deployBranch
  - develop

.Tags: &tags
  - mono-runner

.Variables: &variables
  ENV: dev

build-develop:
  stage: build
  image:
    name: ductn4/ci-node-gitops
  services:
    - docker:stable-dind
  variables:
    <<: *variables
  script:
    # - if [ "$CI_COMMIT_BRANCH" == "testing" ]; then ENV="testing"; fi
    # - if [ "$CI_COMMIT_BRANCH" == "staging" ]; then ENV="staging"; fi
    - if [ "$ENV" == "dev" ]; then cp $VAR_FILE_DEV .env; fi
    # docker
    - docker build -t $IMAGE_FIX -f .docker/dev.dockerfile .
    - docker tag $IMAGE_FIX $IMAGE_BACKUP
    # Set AWS key
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    # login aws ecr
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY_HOST/$APPLICATION
    - docker push $IMAGE_BACKUP
  environment:
    name: $CI_COMMIT_REF_NAME
  tags: *tags
  only: *deployBranch
  allow_failure: false

# Deployment API
deploy-dapp:
  stage: deploy
  image:
    name: alpine:latest
    entrypoint: [""]
  variables:
    <<: *variables
  script:
    - chmod og= $KEY
    - apk update && apk add openssh-client
    - ssh -i $KEY -o StrictHostKeyChecking=no ubuntu@13.213.68.47 "aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY_HOST/$APPLICATION"
    - ssh -i $KEY -o StrictHostKeyChecking=no ubuntu@13.213.68.47 "docker pull $IMAGE_BACKUP"
    - ssh -i $KEY -o StrictHostKeyChecking=no ubuntu@13.213.68.47 "docker rm -f app || true"
    - ssh -i $KEY -o StrictHostKeyChecking=no ubuntu@13.213.68.47 "docker run -itd --restart always --name app -p 3000:3000 $IMAGE_BACKUP"

  environment:
    name: $CI_COMMIT_REF_NAME
  tags: *tags
  only: *deployBranch
  when: manual
